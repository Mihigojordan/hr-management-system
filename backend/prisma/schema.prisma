// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         String   @id @unique @default(uuid())
  adminName  String?
  adminEmail String?  @unique
  password   String?
  isLocked   Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Department {
  id          String   @id @unique @default(uuid())
  name        String?
  description String? @db.VarChar(1000)
  employee    Employee[]
  contracts            Contract[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


// Define the enum first
enum EmployeeStatus {
  ACTIVE
  TERMINATED
  RESIGNED
  PROBATION
}

// Enum for marital status
enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

model Employee {
  id          String   @id @unique @default(uuid())
  first_name          String
  last_name           String
  gender              String
  date_of_birth       DateTime
  phone               String
  email               String         @unique
  address             String
  national_id         String        @unique
  profile_picture     String?
  cv                  String?
  application_letter  String?
  position            String
  departmentId        String
  department          Department     @relation(fields: [departmentId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  marital_status      MaritalStatus? @default(SINGLE)
  date_hired          DateTime
  status              EmployeeStatus @default(ACTIVE)
  experience          Json?
  contracts            Contract[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
}


model Contract {
  id            String       @id @default(uuid())
  
  employee      Employee     @relation(fields: [employeeId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  employeeId    String       // ðŸ‘ˆ Use String if Employee.id is String (UUID). Change to Int if Employee.id is Int

  department    Department   @relation(fields: [departmentId], references: [id])
  departmentId  String       // ðŸ‘ˆ Same here: match Department.id type

  contractType  ContractType
  startDate     DateTime
  endDate       DateTime?
  salary        Float
  currency      String       @default("RWF")
  status        ContractStatus @default(ACTIVE)

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum ContractType {
  PROBATION
  PERMANENT
  TEMPORARY
  INTERNSHIP
}

enum ContractStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
}


model Job {
  id               Int              @id @default(autoincrement())
  title            String
  description      String
  location         String
  employment_type  EmploymentType
  experience_level ExperienceLevel
  industry         String?
  
  skills_required  Json             
  status           JobStatus         @default(OPEN)

  posted_at        DateTime?         @default(now())
  expiry_date      DateTime?

  appplicants       Applicant[]

  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt

}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
  EXECUTIVE
}

enum JobStatus {
  OPEN
  CLOSED
}

enum ApplicationStage {
  APPLIED
  SHORTLISTED
  INTERVIEWED
  HIRED
  REJECTED
}

model Applicant {
  id              Int               @id @default(autoincrement())
  jobId           Int               // FK â†’ Job.id
  job             Job               @relation(fields: [jobId], references: [id],onDelete:Cascade,onUpdate:Cascade)

  name            String
  email           String
  phone           String?
  cvUrl           String?           // link to uploaded CV
  skills          Json?             // array of candidateâ€™s skills
  experienceYears Int?              // number of years experience

  stage           ApplicationStage  @default(APPLIED)

  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt

  
}